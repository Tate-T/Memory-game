{"version":3,"sources":["assets/scripts/GameScene.js"],"names":["GameScene","Phaser","Scene","constructor","preload","load","image","create","createBackground","createCards","startGame","openedCard","openedCardsCount","initCards","positions","getCardsPosition","cards","forEach","card","position","pop","closeCard","setPosition","x","y","add","sprite","setOrigin","value","config","i","push","Card","input","on","onCardClicked","pointer","opened","openCard","length","cardsPosition","cardTexture","textures","get","getSourceImage","cardWidth","width","cardHeight","height","offsetX","sys","game","cols","offsetY","rows","row","col","Utils","Array","Shuffle"],"mappings":";AAAA,MAAMA,UAAkBC,OAAOC,MAC3BC,cACU,MAAA,QAGVC,UAESC,KAAAA,KAAKC,MAAM,KAAM,iCACjBD,KAAAA,KAAKC,MAAM,OAAQ,2BAEnBD,KAAAA,KAAKC,MAAM,QAAS,4BACpBD,KAAAA,KAAKC,MAAM,QAAS,4BACpBD,KAAAA,KAAKC,MAAM,QAAS,4BACpBD,KAAAA,KAAKC,MAAM,QAAS,4BAI7BC,SAGSC,KAAAA,mBACAC,KAAAA,cACAC,KAAAA,YAGTA,YACSC,KAAAA,WAAa,KACbC,KAAAA,iBAAmB,EACnBC,KAAAA,YAGTA,YACQC,IAAAA,EAAY,KAAKC,mBAChBC,KAAAA,MAAMC,QAAQC,IACXC,IAAAA,EAAWL,EAAUM,MACzBF,EAAKG,YACLH,EAAKI,YAAYH,EAASI,EAAGJ,EAASK,KAI9ChB,mBACSiB,KAAAA,IAAIC,OAAO,EAAG,EAAG,MAAMC,UAAU,EAAG,GAG7ClB,cACSO,KAAAA,MAAQ,GAeR,IAAA,IAAIY,KAASC,OAAOb,MAChB,IAAA,IAAIc,EAAI,EAAGA,EAAI,EAAGA,IACdd,KAAAA,MAAMe,KAAK,IAAIC,KAAK,KAAMJ,IAIlCK,KAAAA,MAAMC,GAAG,iBAAkB,KAAKC,cAAe,MAGxDA,cAAcC,EAASlB,GACfA,GAAAA,EAAKmB,OACE,OAAA,EAEP,KAAK1B,WACD,KAAKA,WAAWiB,QAAUV,EAAKU,OAC1BjB,KAAAA,WAAa,OAChB,KAAKC,mBAEFD,KAAAA,WAAWU,YACXV,KAAAA,WAAaO,GAGjBP,KAAAA,WAAaO,EAGtBA,EAAKoB,WAED,KAAK1B,mBAAqB,KAAKI,MAAMuB,OAAS,GACzC7B,KAAAA,YAIbK,mBACQyB,IAAAA,EAAgB,GAChBC,EAAc,KAAKC,SAASC,IAAI,QAAQC,iBACxCC,EAAYJ,EAAYK,MAAQ,EAChCC,EAAaN,EAAYO,OAAS,EAGlCC,GAAW,KAAKC,IAAIC,KAAKtB,OAAOiB,MAAQD,EAAYhB,OAAOuB,MAAQ,EACnEC,GAAW,KAAKH,IAAIC,KAAKtB,OAAOmB,OAASD,EAAalB,OAAOyB,MAAQ,EAKpE,IAAA,IAAIC,EAAM,EAAGA,EAAM1B,OAAOyB,KAAMC,IAC5B,IAAA,IAAIC,EAAM,EAAGA,EAAM3B,OAAOuB,KAAMI,IACjChB,EAAcT,KAAK,CACfR,EAAG0B,EAAUO,EAAMX,EACnBrB,EAAG6B,EAAUE,EAAMR,IAIxB9C,OAAAA,OAAOwD,MAAMC,MAAMC,QAAQnB","file":"GameScene.9e84ee17.js","sourceRoot":"../src","sourcesContent":["class GameScene extends Phaser.Scene {\n    constructor() {\n        super('Game');\n    }\n\n    preload() {\n        // 1. Dounload background.\n        this.load.image('bg', 'assets/sprites/background.png');\n        this.load.image('card', 'assets/sprites/card.png');\n\n        this.load.image('card1', 'assets/sprites/card1.png');\n        this.load.image('card2', 'assets/sprites/card2.png');\n        this.load.image('card3', 'assets/sprites/card3.png');\n        this.load.image('card4', 'assets/sprites/card4.png');\n\n    }\n\n    create() {\n        // 2. Show background.\n        // this.add.sprite(this.sys.game.config.width / 2, this.sys.game.config.height / 2, 'bg');\n        this.createBackground();\n        this.createCards();\n        this.startGame();\n    }\n\n    startGame() {\n        this.openedCard = null;\n        this.openedCardsCount = 0;\n        this.initCards();\n    }\n\n    initCards() {\n        let positions = this.getCardsPosition();\n        this.cards.forEach(card => {\n            let position = positions.pop();\n            card.closeCard();\n            card.setPosition(position.x, position.y);\n        })\n    }\n\n    createBackground() {\n        this.add.sprite(0, 0, 'bg').setOrigin(0, 0);\n    }\n\n    createCards() {\n        this.cards = [];\n        // let positions = this.getCardsPosition();\n        // for (let position of positions) {\n        //     this.cards.push(new Card(this, position));\n        //     // this.add.sprite(position.x, position.y, 'card').setOrigin(0, 0);\n        // }\n\n        // Phaser.Utils.Array.Shuffle(positions);\n\n        // for (let value of config.cards) {\n        //     for (let i = 0; i < 2; i++) {\n        //         this.cards.push(new Card(this, value, positions.pop()));\n        //     }\n        // }\n\n        for (let value of config.cards) {\n            for (let i = 0; i < 2; i++) {\n                this.cards.push(new Card(this, value));\n            }\n        }\n\n        this.input.on('gameobjectdown', this.onCardClicked, this)\n    }\n\n    onCardClicked(pointer, card) {\n        if (card.opened) {\n            return false;\n        }\n        if (this.openedCard) {\n            if (this.openedCard.value === card.value) {\n                this.openedCard = null;\n                ++this.openedCardsCount;\n            } else {\n                this.openedCard.closeCard();\n                this.openedCard = card;\n            }\n        } else {\n            this.openedCard = card;\n        }\n\n        card.openCard();\n\n        if (this.openedCardsCount === this.cards.length / 2) {\n            this.startGame();\n        }\n    }\n\n    getCardsPosition() {\n        let cardsPosition = [];\n        let cardTexture = this.textures.get('card').getSourceImage();\n        let cardWidth = cardTexture.width + 4;\n        let cardHeight = cardTexture.height + 4;\n        // let cardWidth = 280 + 4;\n        // let cardHeight = 280 + 4;\n        let offsetX = (this.sys.game.config.width - cardWidth * config.cols) / 2;\n        let offsetY = (this.sys.game.config.height - cardHeight * config.rows) / 2;\n        // let offsetX = 55;\n        // let offsetY = 20;\n\n\n        for (let row = 0; row < config.rows; row++) {\n            for (let col = 0; col < config.cols; col++) {\n                cardsPosition.push({\n                    x: offsetX + col * cardWidth,\n                    y: offsetY + row * cardHeight,\n                });\n            }\n        }\n        return Phaser.Utils.Array.Shuffle(cardsPosition);\n    }\n}\n\n    //     scene.preload = function () {\n    //         this.load.image('bg', 'assets/sprites/background.png');\n    //         this.load.image('card', 'assets/sprites/card.png');\n    //    };\n\n    // scene.create = function () {\n    //     // 2. Show background.\n    //     // this.add.sprite(this.sys.game.config.width / 2, this.sys.game.config.height / 2, 'bg');\n    //     this.add.sprite(0, 0, 'bg').setOrigin(0, 0);\n\n    //     let positions = this.getCardsPosition();\n    //     for (let position of positions) {\n    //         this.add.sprite(position.x, position.y, 'card').setOrigin(0, 0);\n    //     }\n    // };\n\n    // scene.getCardsPosition = function () {\n    //     let cardsPosition = [];\n    //     // let cardTexture = this.textures.get('card').getSourceImage();\n    //     // let cardWidth = cardTexture.width + 4;\n    //     // let cardHeight = cardTexture.height + 4;\n    //     let cardWidth = 280 + 4;\n    //     let cardHeight = 280 + 4;\n    //     // let offsetX = (this.sys.game.config.width - cardWidth * config.cols) / 2;\n    //     // let offsetY = (this.sys.game.config.heigth - cardHeight * config.rows) / 2;\n    //     let offsetX = 55;\n    //     let offsetY = 20;\n\n\n    //     for (let row = 0; row < config.rows; row++) {\n    //         for (let col = 0; col < config.cols; col++) {\n    //             cardsPosition.push({\n    //                 x: offsetX + col * cardWidth,\n    //                 y: offsetY + row * cardHeight,\n    //             });\n    //         }\n    //     }\n\n    //     return cardsPosition;\n    // };"]}